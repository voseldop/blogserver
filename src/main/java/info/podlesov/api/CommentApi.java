/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package info.podlesov.api;

import javax.validation.constraints.Size;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import info.podlesov.model.Comment;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Api(value = "comment", description = "the comment API")
@Validated
public interface CommentApi {

    @ApiOperation(value = "get comments", nickname = "getComment", notes = "", response = Comment.class)
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Comment.class),
        @ApiResponse(code = 404, message = "Resource not found")})
    @RequestMapping(value = "/topic/{topicId}/comment",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    Page<Comment> getComment(@ApiParam(value = "ID of parent topic", required = true) @PathVariable("topicId") Long topicId,
                             @ApiParam(value = "Pagination params") @PageableDefault(page = 0, size = 20) Pageable page);


    @ApiOperation(value = "postComment", nickname = "postComment", notes = "", response = Comment.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Comment.class),
        @ApiResponse(code = 404, message = "Resource not found"),
        @ApiResponse(code = 400, message = "Invalid input")})
    @RequestMapping(value = "/topic/{topicId}/comment",
        produces = { "application/json" }, 
        consumes = { "text/plain" },
        method = RequestMethod.POST)
    Comment postComment(@ApiParam(value = "ID of topic to comment",required=true) @PathVariable("topicId") Long topicId,
                        @ApiParam(value = "Comment body", required=true) @Size(max = 250) @RequestBody String body);


    @ApiOperation(value = "update comment", nickname = "putComment", response = Comment.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Comment.class),
        @ApiResponse(code = 404, message = "Resource not found"),
        @ApiResponse(code = 400, message = "Invalid input")})
    @RequestMapping(value = "/topic/{topicId}/comment/{id}",
        produces = { "application/json" }, 
        consumes = { "text/plain" },
        method = RequestMethod.PUT)
    Comment putComment(@ApiParam(value = "ID of topic",required=true) @PathVariable("topicId") Long topicId,
                       @ApiParam(value = "ID of comment",required=true) @PathVariable("id") Long id,
                       @ApiParam(value = "Comment body", required=true) @Size(max = 250) @RequestBody String body);

}
