/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package info.podlesov.api;

import java.io.IOException;
import java.sql.SQLException;

import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

import org.springframework.core.io.Resource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartFile;

import info.podlesov.model.Topic;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Api(value = "topic", description = "the topic API")
@Validated
public interface TopicApi {

    @ApiOperation(value = "Deletes a topic", nickname = "deleteTopic")

    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 412, message = "Can't delete topic with comments")})
    @RequestMapping(value = "/topic/{topicId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    @ResponseStatus(HttpStatus.NO_CONTENT)
    void deleteTopic(@ApiParam(value = "topic id to delete", required=true) @PathVariable("topicId") Long topicId);


    @ApiOperation(value = "Retrieve topics", nickname = "getTopic", notes = "", response = Topic.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Topic.class)})
    @RequestMapping(value = "/topic",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    @Transactional(readOnly = true)
    Page<Topic> getTopic(@PageableDefault(page = 0, size = 20) Pageable pageable);


    @ApiOperation(value = "Retrieve by ID", nickname = "getTopicById", notes = "Returns a single topic", response = Topic.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Topic.class),
        @ApiResponse(code = 404, message = "Resource not found") })
    @RequestMapping(value = "/topic/{topicId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    @Transactional(readOnly = true)
    Topic getTopicById(@ApiParam(value = "ID of topic to return",required=true) @PathVariable("topicId") Long topicId);

    @ApiOperation(value = "Retrieve picture by topic ID", nickname = "getTopicById", notes = "Returns a single topic", response = Topic.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Topic.class),
            @ApiResponse(code = 404, message = "Resource not found") })
    @RequestMapping(value = "/topic/{topicId}/picture",
            produces = { "image/jpeg" },
            method = RequestMethod.GET)
    Resource getPictureTopicById(@ApiParam(value = "ID of topic to return",required=true) @PathVariable("topicId") Long topicId) throws SQLException;


    @ApiOperation(value = "Add a new blog topic", nickname = "postTopic", response = Topic.class)
    @ApiImplicitParams (value = {
            @ApiImplicitParam(dataTypeClass = Topic.class, name = "topic", required = true, paramType = "form"),
            @ApiImplicitParam(dataType = "file", name = "file", paramType = "form")
    })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Topic.class),
        @ApiResponse(code = 400, message = "Invalid input") })
    @RequestMapping(value = "/topic",
        produces = { "application/json" }, 
        consumes = {  MediaType.MULTIPART_FORM_DATA_VALUE, "text/plain" },
        method = RequestMethod.POST)
    Topic postTopic(@ApiParam(value = "Headline") @RequestPart(value="name", required=false) @NotBlank @Size(max = 250) String name,
                    @ApiParam(value = "Message body") @RequestPart(value="body", required=false) @Size(max = 250) String body,
                    @ApiParam(value = "file") @RequestPart( required = false) MultipartFile file) throws IOException;

    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Topic.class),
            @ApiResponse(code = 400, message = "Invalid input") })
    @RequestMapping(value = "/topic2",
            produces = { "application/json" },
            consumes = {  "application/json" },
            method = RequestMethod.POST)
    Topic postTopicJson(@ApiParam(value = "Topic json") @RequestBody @Valid Topic topic) throws IOException;


    @ApiOperation(value = "Updates a topic with form data", nickname = "updateTopic", response = Topic.class)
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Topic.class),
        @ApiResponse(code = 400, message = "Invalid input") })
    @RequestMapping(value = "/topic/{topicId}",
        produces = { "application/json"},
        consumes = { MediaType.MULTIPART_FORM_DATA_VALUE, "text/plain" },
        method = RequestMethod.PUT)
    Topic updateTopic(@ApiParam(value = "ID of topic that needs to be updated",required = true) @PathVariable("topicId") Long topicId,
                      @ApiParam(value = "Headline") @RequestPart(value="name", required=false) @NotBlank @Size(max = 250) String name,
                      @ApiParam(value = "Message body") @RequestPart(value="body", required=false) @Size(max = 250) String body,
                      @ApiParam(value = "Picture", type = "file") @RequestPart(value = "file", required=false) MultipartFile file)
            throws IOException;

}
